#Most notes are from "https://www.tutorialspoint.com/compiler_design/index.htm and the subsequent pages"
-Code goes through multiple phases where it is transformed in each phase such that in the end you achieve machine code

--First Phase: The Pre-Processor
---Generally deals with the compiler input, where it fetches files included, language extensions and augmentations such as external libraries

--Second Phase: The Interpreter or Compiler
---An interpreter, like a compiler, translates high-level language into low-level machine language. The difference lies in the way they read the source code or input. A compiler reads the whole source code at once, creates tokens, checks semantics, generates intermediate code, executes the whole program and may involve many passes. In contrast, an interpreter reads a statement from the input, converts it to an intermediate code, executes it, then takes the next statement in sequence. If an error occurs, an interpreter stops execution and reports it. whereas a compiler reads the whole program even if it encounters several errors.

---Compiler phases:

----Lexical Analysis
-----The first phase of scanner works as a text scanner. This phase scans the source code as a stream of characters and converts it into meaningful lexemes. Lexical analyzer represents these lexemes in the form of tokens as : <token-name, attribute-value>
-----For more info: "https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm"

----Syntax Analysis
------The next phase is called the syntax analysis or parsing. It takes the token produced by lexical analysis as input and generates a parse tree (or syntax tree). In this phase, token arrangements are checked against the source code grammar

----Semantic Analysis:
-----Semantic analysis checks whether the parse tree constructed follows the rules of language.Also, the semantic analyzer keeps track of identifiers, their types and expressions; whether identifiers are declared before use or not etc. The semantic analyzer produces an annotated syntax tree as an output

----Intermediate Code Generation
-----After semantic analysis the compiler generates an intermediate code of the source code for the target machine. It represents a program for some abstract machine. It is in between the high-level language and the machine language. This intermediate code should be generated in such a way that it makes it easier to be translated into the target machine code.

----Code Generation
-----The code generator takes the optimized representation of the intermediate code and maps it to the target machine language. The code generator translates the intermediate code into a sequence of (generally) re-locatable machine code. Sequence of instructions of machine code performs the task as the intermediate code would do

----Symbol Table
-----It is a data-structure maintained throughout all the phases of a compiler. All the identifier's names along with their types are stored here. The symbol table makes it easier for the compiler to quickly search the identifier record and retrieve it. The symbol table is also used for scope management.

------------------------------------------------------------

Language being compiled: Lua
-Why?
--Because it has:
---Only 21 Keywords
---Easy readable syntax with easy grammar

Language being compiled to: C or C++
-Why? 
--Because Lua is already designed to be compiled to C in its virtual machine

------------------------------------------------------------

Lua's complete grammar in EBNF (It does not describe operator precedences.): 

	chunk ::= {stat [`;´]} [laststat [`;´]]

	block ::= chunk

	stat ::=  varlist `=´ explist |   									
		functioncall | 
		"do" block "end" | 
		"while" exp "do" block "end" | 
		"repeat" block "until" exp | 
		"if" exp "then" block {"elseif" exp "then" block} ["else" block] "end" | 
		"for" Name `=´ exp `,´ exp [`,´ exp] "do" block "end" | 
		"for" namelist "in" explist "do" block "end" | 
		"function" funcname funcbody | 
		"local" "function" Name funcbody | 
		"local" namelist [`=´ explist] 

	laststat ::= return [explist] | break

	funcname ::= Name {`.´ Name} [`:´ Name]

	varlist ::= var {`,´ var}

	var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name 

	namelist ::= Name {`,´ Name}

	explist ::= {exp `,´} exp

	exp ::=  "nil" | "false" | "true" | Number | String | `...´ | function | 
		prefixexp | tableconstructor | exp binop exp | unop exp 

	prefixexp ::= var | functioncall | `(´ exp `)´

	functioncall ::=  prefixexp args | prefixexp `:´ Name args 

	args ::=  `(´ [explist] `)´ | tableconstructor | String 

	function ::= "function" funcbody

	funcbody ::= `(´ [parlist] `)´ block "end"

	parlist ::= namelist [`,´ `...´] | `...´

	tableconstructor ::= `{´ [fieldlist] `}´

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp

	fieldsep ::= `,´ | `;´

	binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | 
		`<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ | 
		"and" | "or"

	unop ::= `-´ | "not" | `#´
